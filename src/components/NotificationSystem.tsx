import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { useLanguage } from "@/contexts/LanguageContext";
import { 
  Bell, 
  CheckCircle, 
  Clock, 
  AlertTriangle, 
  Mail, 
  MessageSquare,
  Megaphone,
  X,
  Settings,
  Volume2,
  VolumeX
} from "lucide-react";

interface Notification {
  id: string;
  type: 'success' | 'warning' | 'info' | 'error';
  title: string;
  message: string;
  timestamp: Date;
  read: boolean;
  category: 'application' | 'payment' | 'system' | 'announcement';
  actionRequired?: boolean;
}

const NotificationSystem: React.FC = () => {
  const { language } = useLanguage();
  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [unreadCount, setUnreadCount] = useState(0);
  const [showNotifications, setShowNotifications] = useState(false);
  const [soundEnabled, setSoundEnabled] = useState(true);
  const [emailEnabled, setEmailEnabled] = useState(true);
  const [smsEnabled, setSmsEnabled] = useState(true);

  // Mock notifications data
  const mockNotifications: Notification[] = [
    {
      id: '1',
      type: 'success',
      title: language === 'en' ? 'Application Approved!' : '‡≤Ö‡≤∞‡≥ç‡≤ú‡≤ø ‡≤Ö‡≤®‡≥Å‡≤Æ‡≥ã‡≤¶‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü!',
      message: language === 'en' 
        ? 'Your driving license application #DL2024001 has been approved. You can collect your license from RTO office.'
        : '‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤ö‡≤æ‡≤≤‡≤®‡≤æ ‡≤™‡≤∞‡≤µ‡≤æ‡≤®‡≤ó‡≤ø ‡≤Ö‡≤∞‡≥ç‡≤ú‡≤ø #DL2024001 ‡≤Ö‡≤®‡≥ç‡≤®‡≥Å ‡≤Ö‡≤®‡≥Å‡≤Æ‡≥ã‡≤¶‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü. ‡≤®‡≥Ä‡≤µ‡≥Å RTO ‡≤ï‡≤õ‡≥á‡≤∞‡≤ø‡≤Ø‡≤ø‡≤Ç‡≤¶ ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤™‡≤∞‡≤µ‡≤æ‡≤®‡≤ó‡≤ø‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤∏‡≤Ç‡≤ó‡≥ç‡≤∞‡≤π‡≤ø‡≤∏‡≤¨‡≤π‡≥Å‡≤¶‡≥Å.',
      timestamp: new Date(Date.now() - 30 * 60 * 1000), // 30 minutes ago
      read: false,
      category: 'application',
      actionRequired: true
    },
    {
      id: '2',
      type: 'info',
      title: language === 'en' ? 'Payment Received' : '‡≤™‡≤æ‡≤µ‡≤§‡≤ø ‡≤∏‡≥ç‡≤µ‡≥Ä‡≤ï‡≤∞‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü',
      message: language === 'en' 
        ? 'Payment of ‚Çπ1,680 received for driving license application. Receipt: RCP20241008001'
        : '‡≤ö‡≤æ‡≤≤‡≤®‡≤æ ‡≤™‡≤∞‡≤µ‡≤æ‡≤®‡≤ó‡≤ø ‡≤Ö‡≤∞‡≥ç‡≤ú‡≤ø‡≤ó‡≤æ‡≤ó‡≤ø ‚Çπ1,680 ‡≤™‡≤æ‡≤µ‡≤§‡≤ø ‡≤∏‡≥ç‡≤µ‡≥Ä‡≤ï‡≤∞‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü. ‡≤∞‡≤∏‡≥Ä‡≤¶‡≤ø: RCP20241008001',
      timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 hours ago
      read: true,
      category: 'payment'
    },
    {
      id: '3',
      type: 'warning',
      title: language === 'en' ? 'Document Verification Pending' : '‡≤¶‡≤æ‡≤ñ‡≤≤‡≥Ü ‡≤™‡≤∞‡≤ø‡≤∂‡≥Ä‡≤≤‡≤®‡≥Ü ‡≤¨‡≤æ‡≤ï‡≤ø',
      message: language === 'en' 
        ? 'Your address proof document needs verification. Please visit RTO office within 7 days.'
        : '‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤µ‡≤ø‡≤≥‡≤æ‡≤∏ ‡≤™‡≥Å‡≤∞‡≤æ‡≤µ‡≥Ü ‡≤¶‡≤æ‡≤ñ‡≤≤‡≥Ü‡≤ó‡≥Ü ‡≤™‡≤∞‡≤ø‡≤∂‡≥Ä‡≤≤‡≤®‡≥Ü ‡≤Ö‡≤ó‡≤§‡≥ç‡≤Ø‡≤µ‡≤ø‡≤¶‡≥Ü. ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å 7 ‡≤¶‡≤ø‡≤®‡≤ó‡≤≥‡≥ä‡≤≥‡≤ó‡≥Ü RTO ‡≤ï‡≤õ‡≥á‡≤∞‡≤ø‡≤ó‡≥Ü ‡≤≠‡≥á‡≤ü‡≤ø ‡≤®‡≥Ä‡≤°‡≤ø.',
      timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000), // 1 day ago
      read: false,
      category: 'application',
      actionRequired: true
    },
    {
      id: '4',
      type: 'info',
      title: language === 'en' ? 'üéâ System Announcement' : 'üéâ ‡≤∏‡≤ø‡≤∏‡≥ç‡≤ü‡≤Æ‡≥ç ‡≤™‡≥ç‡≤∞‡≤ï‡≤ü‡≤£‡≥Ü',
      message: language === 'en' 
        ? 'New feature: Voice-to-text input is now available for all government forms! Try it today.'
        : '‡≤π‡≥ä‡≤∏ ‡≤µ‡≥à‡≤∂‡≤ø‡≤∑‡≥ç‡≤ü‡≥ç‡≤Ø: ‡≤é‡≤≤‡≥ç‡≤≤‡≤æ ‡≤∏‡≤∞‡≥ç‡≤ï‡≤æ‡≤∞‡≤ø ‡≤´‡≤æ‡≤∞‡≥ç‡≤Æ‡≥ç‚Äå‡≤ó‡≤≥‡≤ø‡≤ó‡≥Ü ‡≤ß‡≥ç‡≤µ‡≤®‡≤ø-‡≤ü‡≥Å-‡≤ü‡≥Ü‡≤ï‡≥ç‡≤∏‡≥ç‡≤ü‡≥ç ‡≤á‡≤®‡≥ç‚Äå‡≤™‡≥Å‡≤ü‡≥ç ‡≤à‡≤ó ‡≤≤‡≤≠‡≥ç‡≤Ø‡≤µ‡≤ø‡≤¶‡≥Ü! ‡≤á‡≤Ç‡≤¶‡≥Å ‡≤™‡≥ç‡≤∞‡≤Ø‡≤§‡≥ç‡≤®‡≤ø‡≤∏‡≤ø.',
      timestamp: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000), // 3 days ago
      read: true,
      category: 'announcement'
    }
  ];

  // Initialize notifications on component mount
  useEffect(() => {
    setNotifications(mockNotifications);
    setUnreadCount(mockNotifications.filter(n => !n.read).length);
  }, [language]);

  // Mock real-time notification simulation
  useEffect(() => {
    const interval = setInterval(() => {
      // Simulate receiving a new notification every 2 minutes
      if (Math.random() > 0.7) { // 30% chance every 2 minutes
        addNewNotification();
      }
    }, 2 * 60 * 1000);

    return () => clearInterval(interval);
  }, [language]);

  const addNewNotification = () => {
    const newNotificationTemplates = [
      {
        type: 'success' as const,
        title: language === 'en' ? 'Test Scheduled!' : '‡≤™‡≤∞‡≥Ä‡≤ï‡≥ç‡≤∑‡≥Ü ‡≤®‡≤ø‡≤ó‡≤¶‡≤ø‡≤™‡≤°‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü!',
        message: language === 'en' 
          ? 'Your driving test is scheduled for tomorrow at 10:00 AM. Please bring required documents.'
          : '‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤ö‡≤æ‡≤≤‡≤®‡≤æ ‡≤™‡≤∞‡≥Ä‡≤ï‡≥ç‡≤∑‡≥Ü‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤®‡≤æ‡≤≥‡≥Ü ‡≤¨‡≥Ü‡≤≥‡≤ø‡≤ó‡≥ç‡≤ó‡≥Ü 10:00 ‡≤ï‡≥ç‡≤ï‡≥Ü ‡≤®‡≤ø‡≤ó‡≤¶‡≤ø‡≤™‡≤°‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü. ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤Ö‡≤ó‡≤§‡≥ç‡≤Ø ‡≤¶‡≤æ‡≤ñ‡≤≤‡≥Ü‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤§‡≤®‡≥ç‡≤®‡≤ø.',
        category: 'application' as const
      },
      {
        type: 'info' as const,
        title: language === 'en' ? 'New Update Available' : '‡≤π‡≥ä‡≤∏ ‡≤Ö‡≤™‡≥ç‚Äå‡≤°‡≥á‡≤ü‡≥ç ‡≤≤‡≤≠‡≥ç‡≤Ø‡≤µ‡≤ø‡≤¶‡≥Ü',
        message: language === 'en' 
          ? 'e-Nagarika app has been updated with new features and bug fixes.'
          : 'e-Nagarika ‡≤Ö‡≤™‡≥ç‡≤≤‡≤ø‡≤ï‡≥á‡≤∂‡≤®‡≥ç ‡≤Ö‡≤®‡≥ç‡≤®‡≥Å ‡≤π‡≥ä‡≤∏ ‡≤µ‡≥à‡≤∂‡≤ø‡≤∑‡≥ç‡≤ü‡≥ç‡≤Ø‡≤ó‡≤≥‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤¨‡≤ó‡≥ç ‡≤´‡≤ø‡≤ï‡≥ç‡≤∏‡≥ç‚Äå‡≤ó‡≤≥‡≥ä‡≤Ç‡≤¶‡≤ø‡≤ó‡≥Ü ‡≤Ö‡≤™‡≥ç‚Äå‡≤°‡≥á‡≤ü‡≥ç ‡≤Æ‡≤æ‡≤°‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü.',
        category: 'system' as const
      }
    ];

    const template = newNotificationTemplates[Math.floor(Math.random() * newNotificationTemplates.length)];
    const newNotification: Notification = {
      id: Date.now().toString(),
      ...template,
      timestamp: new Date(),
      read: false,
      actionRequired: template.type === 'success'
    };

    setNotifications(prev => [newNotification, ...prev]);
    setUnreadCount(prev => prev + 1);

    // Play notification sound if enabled
    if (soundEnabled) {
      playNotificationSound();
    }

    // Show browser notification
    showBrowserNotification(newNotification);
  };

  const playNotificationSound = () => {
    // Mock notification sound
    try {
      const audio = new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmYdBTyN2+6/diMFl');
      audio.volume = 0.3;
      audio.play().catch(() => {}); // Ignore errors if audio playback fails
    } catch (error) {
      // Silently handle audio errors
    }
  };

  const showBrowserNotification = (notification: Notification) => {
    if ('Notification' in window && Notification.permission === 'granted') {
      new Notification(notification.title, {
        body: notification.message,
        icon: '/favicon.ico',
        tag: notification.id
      });
    }
  };

  const markAsRead = (id: string) => {
    setNotifications(prev => 
      prev.map(n => n.id === id ? { ...n, read: true } : n)
    );
    setUnreadCount(prev => Math.max(0, prev - 1));
  };

  const markAllAsRead = () => {
    setNotifications(prev => prev.map(n => ({ ...n, read: true })));
    setUnreadCount(0);
  };

  const deleteNotification = (id: string) => {
    setNotifications(prev => prev.filter(n => n.id !== id));
    const notification = notifications.find(n => n.id === id);
    if (notification && !notification.read) {
      setUnreadCount(prev => Math.max(0, prev - 1));
    }
  };

  const getNotificationIcon = (type: string) => {
    switch (type) {
      case 'success': return <CheckCircle className="text-green-500" size={20} />;
      case 'warning': return <AlertTriangle className="text-yellow-500" size={20} />;
      case 'error': return <X className="text-red-500" size={20} />;
      default: return <Bell className="text-blue-500" size={20} />;
    }
  };

  const formatTimestamp = (timestamp: Date) => {
    const now = new Date();
    const diff = now.getTime() - timestamp.getTime();
    const minutes = Math.floor(diff / (1000 * 60));
    const hours = Math.floor(diff / (1000 * 60 * 60));
    const days = Math.floor(diff / (1000 * 60 * 60 * 24));

    if (minutes < 1) return language === 'en' ? 'Just now' : '‡≤à‡≤ó‡≤∑‡≥ç‡≤ü‡≥á';
    if (minutes < 60) return language === 'en' ? `${minutes}m ago` : `${minutes} ‡≤®‡≤ø‡≤Æ‡≤ø‡≤∑ ‡≤π‡≤ø‡≤Ç‡≤¶‡≥Ü`;
    if (hours < 24) return language === 'en' ? `${hours}h ago` : `${hours} ‡≤ó‡≤Ç‡≤ü‡≥Ü ‡≤π‡≤ø‡≤Ç‡≤¶‡≥Ü`;
    if (days < 7) return language === 'en' ? `${days}d ago` : `${days} ‡≤¶‡≤ø‡≤® ‡≤π‡≤ø‡≤Ç‡≤¶‡≥Ü`;
    return timestamp.toLocaleDateString(language === 'en' ? 'en-IN' : 'kn-IN');
  };

  // Mock email notification
  const sendTestEmail = async () => {
    // Simulate email sending
    await new Promise(resolve => setTimeout(resolve, 1000));
    alert(language === 'en' 
      ? 'üìß Test email notification sent to your registered email!'
      : 'üìß ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤®‡≥ã‡≤Ç‡≤¶‡≤æ‡≤Ø‡≤ø‡≤§ ‡≤á‡≤Æ‡≥á‡≤≤‡≥ç‚Äå‡≤ó‡≥Ü ‡≤™‡≤∞‡≥Ä‡≤ï‡≥ç‡≤∑‡≤æ ‡≤á‡≤Æ‡≥á‡≤≤‡≥ç ‡≤Ö‡≤ß‡≤ø‡≤∏‡≥Ç‡≤ö‡≤®‡≥Ü ‡≤ï‡≤≥‡≥Å‡≤π‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü!'
    );
  };

  // Mock SMS notification
  const sendTestSMS = async () => {
    // Simulate SMS sending
    await new Promise(resolve => setTimeout(resolve, 1000));
    alert(language === 'en' 
      ? 'üì± Test SMS notification sent to your registered mobile number!'
      : 'üì± ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤®‡≥ã‡≤Ç‡≤¶‡≤æ‡≤Ø‡≤ø‡≤§ ‡≤Æ‡≥ä‡≤¨‡≥à‡≤≤‡≥ç ‡≤∏‡≤Ç‡≤ñ‡≥ç‡≤Ø‡≥Ü‡≤ó‡≥Ü ‡≤™‡≤∞‡≥Ä‡≤ï‡≥ç‡≤∑‡≤æ SMS ‡≤Ö‡≤ß‡≤ø‡≤∏‡≥Ç‡≤ö‡≤®‡≥Ü ‡≤ï‡≤≥‡≥Å‡≤π‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü!'
    );
  };

  // Request notification permission
  const requestNotificationPermission = async () => {
    if ('Notification' in window) {
      const permission = await Notification.requestPermission();
      if (permission === 'granted') {
        alert(language === 'en' 
          ? '‚úÖ Browser notifications enabled!'
          : '‚úÖ ‡≤¨‡≥ç‡≤∞‡≥å‡≤∏‡≤∞‡≥ç ‡≤Ö‡≤ß‡≤ø‡≤∏‡≥Ç‡≤ö‡≤®‡≥Ü‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤∏‡≤ï‡≥ç‡≤∞‡≤ø‡≤Ø‡≤ó‡≥ä‡≤≥‡≤ø‡≤∏‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü!'
        );
      }
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-6 space-y-6">
      {/* Notification Bell & Settings */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="flex items-center space-x-2">
                <Bell className="text-blue-600" size={24} />
                <span>{language === 'en' ? 'Notification Center' : '‡≤Ö‡≤ß‡≤ø‡≤∏‡≥Ç‡≤ö‡≤®‡≤æ ‡≤ï‡≥á‡≤Ç‡≤¶‡≥ç‡≤∞'}</span>
                {unreadCount > 0 && (
                  <Badge variant="destructive" className="ml-2">
                    {unreadCount}
                  </Badge>
                )}
              </CardTitle>
              <CardDescription>
                {language === 'en' 
                  ? 'Manage your notifications and stay updated with real-time alerts'
                  : '‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤Ö‡≤ß‡≤ø‡≤∏‡≥Ç‡≤ö‡≤®‡≥Ü‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤®‡≤ø‡≤∞‡≥ç‡≤µ‡≤π‡≤ø‡≤∏‡≤ø ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤®‡≥à‡≤ú-‡≤∏‡≤Æ‡≤Ø‡≤¶ ‡≤é‡≤ö‡≥ç‡≤ö‡≤∞‡≤ø‡≤ï‡≥Ü‡≤ó‡≤≥‡≥ä‡≤Ç‡≤¶‡≤ø‡≤ó‡≥Ü ‡≤®‡≤µ‡≥Ä‡≤ï‡≥É‡≤§‡≤µ‡≤æ‡≤ó‡≤ø‡≤∞‡≤ø'
                }
              </CardDescription>
            </div>
            <div className="flex space-x-2">
              <Button
                variant="outline"
                size="sm"
                onClick={() => setShowNotifications(!showNotifications)}
              >
                {showNotifications 
                  ? (language === 'en' ? 'Hide' : '‡≤Æ‡≤∞‡≥Ü‡≤Æ‡≤æ‡≤°‡≤ø')
                  : (language === 'en' ? 'Show All' : '‡≤é‡≤≤‡≥ç‡≤≤‡≤µ‡≤®‡≥ç‡≤®‡≥Ç ‡≤§‡≥ã‡≤∞‡≤ø‡≤∏‡≤ø')
                }
              </Button>
              {unreadCount > 0 && (
                <Button size="sm" onClick={markAllAsRead}>
                  {language === 'en' ? 'Mark All Read' : '‡≤é‡≤≤‡≥ç‡≤≤‡≤µ‡≤®‡≥ç‡≤®‡≥Ç ‡≤ì‡≤¶‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü ‡≤é‡≤Ç‡≤¶‡≥Å ‡≤ó‡≥Å‡≤∞‡≥Å‡≤§‡≤ø‡≤∏‡≤ø'}
                </Button>
              )}
            </div>
          </div>
        </CardHeader>

        {/* Notification Settings */}
        <CardContent>
          <div className="grid md:grid-cols-3 gap-4 mb-6">
            {/* Sound Settings */}
            <div className="flex items-center justify-between p-3 border rounded-lg">
              <div className="flex items-center space-x-2">
                {soundEnabled ? <Volume2 size={16} /> : <VolumeX size={16} />}
                <span className="text-sm">{language === 'en' ? 'Sound' : '‡≤ß‡≥ç‡≤µ‡≤®‡≤ø'}</span>
              </div>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setSoundEnabled(!soundEnabled)}
                className={soundEnabled ? 'text-green-600' : 'text-gray-400'}
              >
                {soundEnabled ? 'ON' : 'OFF'}
              </Button>
            </div>

            {/* Email Settings */}
            <div className="flex items-center justify-between p-3 border rounded-lg">
              <div className="flex items-center space-x-2">
                <Mail size={16} />
                <span className="text-sm">{language === 'en' ? 'Email' : '‡≤á‡≤Æ‡≥á‡≤≤‡≥ç'}</span>
              </div>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setEmailEnabled(!emailEnabled)}
                className={emailEnabled ? 'text-green-600' : 'text-gray-400'}
              >
                {emailEnabled ? 'ON' : 'OFF'}
              </Button>
            </div>

            {/* SMS Settings */}
            <div className="flex items-center justify-between p-3 border rounded-lg">
              <div className="flex items-center space-x-2">
                <MessageSquare size={16} />
                <span className="text-sm">{language === 'en' ? 'SMS' : 'SMS'}</span>
              </div>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setSmsEnabled(!smsEnabled)}
                className={smsEnabled ? 'text-green-600' : 'text-gray-400'}
              >
                {smsEnabled ? 'ON' : 'OFF'}
              </Button>
            </div>
          </div>

          {/* Test Notifications */}
          <div className="grid md:grid-cols-4 gap-2">
            <Button variant="outline" size="sm" onClick={requestNotificationPermission}>
              {language === 'en' ? 'Enable Browser' : '‡≤¨‡≥ç‡≤∞‡≥å‡≤∏‡≤∞‡≥ç ‡≤∏‡≤ï‡≥ç‡≤∞‡≤ø‡≤Ø‡≤ó‡≥ä‡≤≥‡≤ø‡≤∏‡≤ø'}
            </Button>
            <Button variant="outline" size="sm" onClick={sendTestEmail}>
              {language === 'en' ? 'Test Email' : '‡≤á‡≤Æ‡≥á‡≤≤‡≥ç ‡≤™‡≤∞‡≥Ä‡≤ï‡≥ç‡≤∑‡≤ø‡≤∏‡≤ø'}
            </Button>
            <Button variant="outline" size="sm" onClick={sendTestSMS}>
              {language === 'en' ? 'Test SMS' : 'SMS ‡≤™‡≤∞‡≥Ä‡≤ï‡≥ç‡≤∑‡≤ø‡≤∏‡≤ø'}
            </Button>
            <Button variant="outline" size="sm" onClick={addNewNotification}>
              {language === 'en' ? 'Add Test Alert' : '‡≤™‡≤∞‡≥Ä‡≤ï‡≥ç‡≤∑‡≤æ ‡≤é‡≤ö‡≥ç‡≤ö‡≤∞‡≤ø‡≤ï‡≥Ü ‡≤∏‡≥á‡≤∞‡≤ø‡≤∏‡≤ø'}
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Recent Notifications */}
      {showNotifications && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <Clock size={20} />
              <span>{language === 'en' ? 'Recent Notifications' : '‡≤á‡≤§‡≥ç‡≤§‡≥Ä‡≤ö‡≤ø‡≤® ‡≤Ö‡≤ß‡≤ø‡≤∏‡≥Ç‡≤ö‡≤®‡≥Ü‡≤ó‡≤≥‡≥Å'}</span>
            </CardTitle>
          </CardHeader>
          <CardContent>
            {notifications.length === 0 ? (
              <div className="text-center py-8 text-gray-500">
                <Bell size={48} className="mx-auto mb-4 opacity-50" />
                <p>{language === 'en' ? 'No notifications yet' : '‡≤á‡≤®‡≥ç‡≤®‡≥Ç ‡≤Ø‡≤æ‡≤µ‡≥Å‡≤¶‡≥á ‡≤Ö‡≤ß‡≤ø‡≤∏‡≥Ç‡≤ö‡≤®‡≥Ü‡≤ó‡≤≥‡≤ø‡≤≤‡≥ç‡≤≤'}</p>
              </div>
            ) : (
              <div className="space-y-3 max-h-96 overflow-y-auto">
                {notifications.map((notification) => (
                  <div
                    key={notification.id}
                    className={`p-4 border rounded-lg transition-all ${
                      notification.read 
                        ? 'bg-white border-gray-200' 
                        : 'bg-blue-50 border-blue-200'
                    }`}
                  >
                    <div className="flex items-start justify-between">
                      <div className="flex space-x-3 flex-1">
                        <div className="mt-1">
                          {getNotificationIcon(notification.type)}
                        </div>
                        <div className="flex-1 min-w-0">
                          <div className="flex items-center space-x-2 mb-1">
                            <h4 className="font-semibold text-sm">{notification.title}</h4>
                            {notification.actionRequired && (
                              <Badge variant="destructive" className="text-xs">
                                {language === 'en' ? 'Action Required' : '‡≤ï‡≥ç‡≤∞‡≤Æ ‡≤Ö‡≤ó‡≤§‡≥ç‡≤Ø'}
                              </Badge>
                            )}
                            {!notification.read && (
                              <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                            )}
                          </div>
                          <p className="text-sm text-gray-600 mb-2">{notification.message}</p>
                          <div className="flex items-center space-x-4 text-xs text-gray-500">
                            <span>{formatTimestamp(notification.timestamp)}</span>
                            <Badge variant="outline" className="text-xs">
                              {notification.category}
                            </Badge>
                          </div>
                        </div>
                      </div>
                      <div className="flex space-x-1 ml-2">
                        {!notification.read && (
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => markAsRead(notification.id)}
                            className="text-xs"
                          >
                            {language === 'en' ? 'Mark Read' : '‡≤ì‡≤¶‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü'}
                          </Button>
                        )}
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => deleteNotification(notification.id)}
                        >
                          <X size={14} />
                        </Button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </CardContent>
        </Card>
      )}

      {/* Admin Broadcast (Mock) */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Megaphone className="text-orange-600" size={24} />
            <span>{language === 'en' ? 'Admin Announcements' : '‡≤®‡≤ø‡≤∞‡≥ç‡≤µ‡≤æ‡≤π‡≤ï ‡≤™‡≥ç‡≤∞‡≤ï‡≤ü‡≤£‡≥Ü‡≤ó‡≤≥‡≥Å'}</span>
          </CardTitle>
          <CardDescription>
            {language === 'en' 
              ? 'Important updates and announcements from government officials'
              : '‡≤∏‡≤∞‡≥ç‡≤ï‡≤æ‡≤∞‡≤ø ‡≤Ö‡≤ß‡≤ø‡≤ï‡≤æ‡≤∞‡≤ø‡≤ó‡≤≥‡≤ø‡≤Ç‡≤¶ ‡≤™‡≥ç‡≤∞‡≤Æ‡≥Å‡≤ñ ‡≤®‡≤µ‡≥Ä‡≤ï‡≤∞‡≤£‡≤ó‡≤≥‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤™‡≥ç‡≤∞‡≤ï‡≤ü‡≤£‡≥Ü‡≤ó‡≤≥‡≥Å'
            }
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="bg-yellow-50 border border-yellow-200 p-4 rounded-lg">
              <div className="flex items-center space-x-2 mb-2">
                <Megaphone className="text-yellow-600" size={16} />
                <span className="font-semibold text-yellow-700">
                  {language === 'en' ? 'System Maintenance Notice' : '‡≤∏‡≤ø‡≤∏‡≥ç‡≤ü‡≤Æ‡≥ç ‡≤®‡≤ø‡≤∞‡≥ç‡≤µ‡≤π‡≤£‡≤æ ‡≤∏‡≥Ç‡≤ö‡≤®‡≥Ü'}
                </span>
              </div>
              <p className="text-sm text-yellow-700">
                {language === 'en' 
                  ? 'Scheduled maintenance on Oct 15, 2024 from 2:00 AM to 4:00 AM. Services may be temporarily unavailable.'
                  : '15 ‡≤Ö‡≤ï‡≥ç‡≤ü‡≥ã‡≤¨‡≤∞‡≥ç 2024 ‡≤∞‡≤Ç‡≤¶‡≥Å ‡≤¨‡≥Ü‡≤≥‡≤ø‡≤ó‡≥ç‡≤ó‡≥Ü 2:00 ‡≤∞‡≤ø‡≤Ç‡≤¶ 4:00 ‡≤µ‡≤∞‡≥Ü‡≤ó‡≥Ü ‡≤®‡≤ø‡≤ó‡≤¶‡≤ø‡≤§ ‡≤®‡≤ø‡≤∞‡≥ç‡≤µ‡≤π‡≤£‡≥Ü. ‡≤∏‡≥á‡≤µ‡≥Ü‡≤ó‡≤≥‡≥Å ‡≤§‡≤æ‡≤§‡≥ç‡≤ï‡≤æ‡≤≤‡≤ø‡≤ï‡≤µ‡≤æ‡≤ó‡≤ø ‡≤≤‡≤≠‡≥ç‡≤Ø‡≤µ‡≤ø‡≤≤‡≥ç‡≤≤‡≤¶‡≤ø‡≤∞‡≤¨‡≤π‡≥Å‡≤¶‡≥Å.'
                }
              </p>
            </div>

            <div className="bg-green-50 border border-green-200 p-4 rounded-lg">
              <div className="flex items-center space-x-2 mb-2">
                <CheckCircle className="text-green-600" size={16} />
                <span className="font-semibold text-green-700">
                  {language === 'en' ? 'New Feature Launch' : '‡≤π‡≥ä‡≤∏ ‡≤µ‡≥à‡≤∂‡≤ø‡≤∑‡≥ç‡≤ü‡≥ç‡≤Ø ‡≤™‡≥ç‡≤∞‡≤æ‡≤∞‡≤Ç‡≤≠'}
                </span>
              </div>
              <p className="text-sm text-green-700">
                {language === 'en' 
                  ? 'üéâ Voice-to-text feature is now live! Apply for government services using your voice in English and Kannada.'
                  : 'üéâ ‡≤ß‡≥ç‡≤µ‡≤®‡≤ø-‡≤ü‡≥Å-‡≤ü‡≥Ü‡≤ï‡≥ç‡≤∏‡≥ç‡≤ü‡≥ç ‡≤µ‡≥à‡≤∂‡≤ø‡≤∑‡≥ç‡≤ü‡≥ç‡≤Ø ‡≤à‡≤ó ‡≤≤‡≥à‡≤µ‡≥ç! ‡≤á‡≤Ç‡≤ó‡≥ç‡≤≤‡≤ø‡≤∑‡≥ç ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤ï‡≤®‡≥ç‡≤®‡≤°‡≤¶‡≤≤‡≥ç‡≤≤‡≤ø ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤ß‡≥ç‡≤µ‡≤®‡≤ø‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤¨‡≤≥‡≤∏‡≤ø‡≤ï‡≥ä‡≤Ç‡≤°‡≥Å ‡≤∏‡≤∞‡≥ç‡≤ï‡≤æ‡≤∞‡≤ø ‡≤∏‡≥á‡≤µ‡≥Ü‡≤ó‡≤≥‡≤ø‡≤ó‡≥Ü ‡≤Ö‡≤∞‡≥ç‡≤ú‡≤ø ‡≤∏‡≤≤‡≥ç‡≤≤‡≤ø‡≤∏‡≤ø.'
                }
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default NotificationSystem;